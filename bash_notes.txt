	Special Variables in particular bash script which is running
Note:	
$0 - The name of the Bash script.
$1 - $9 - The first 9 arguments to the Bash script. (As mentioned above.)
$# - How many arguments were passed to the Bash script.
$@ - All the arguments supplied to the Bash script.
$? - The exit status of the most recently run process.
$$ - The process ID of the current script.
$USER - The username of the user running the script.
$HOSTNAME - The hostname of the machine the script is running on.
$SECONDS - The number of seconds since the script was started.
$RANDOM - Returns a different random number each time is it referred to.
$LINENO - Returns the current line number in the Bash script.	
Command:
env # without argument lists environment variables
Command line arguments are good way of supplying data as they will be retained in the users history making it easy for them to rerun commands. Command line arguments are also convenient when the script is not run directly by the user.


      Exit status codes
0 #the process exited succesfully
1 # Catchall for general errors...


      Wildcards
* - represents zero or more characters
? - represents a single character
[] - represents a range of characters


	Regular expressions
. (dot) - a single character.
? - the preceding character matches 0 or 1 times only.
* - the preceding character matches 0 or more times.
+ - the preceding character matches 1 or more times.
{n} - the preceding character matches exactly n times.
{n,m} - the preceding character matches at least n times and not more than m times.
[agd] - the character is one of those included within the square brackets.
[^agd] - the character is not one of those included within the square brackets.
[c-f] - the dash within the square brackets operates as a range. In this case it means either the letters c, d, e or f.
() - allows us to group several characters to behave as one.
| (pipe symbol) - the logical OR operation.
^ - matches the beginning of the line.
$ - matches the end of the line.


    Piping and redirection
Every program we run on the command line automatically has three data streams connected to it. Redirected from STDIN is good when your script is behaving like a filter and just modifying or reformatting data that is fed to it.

    STDIN (0) - Standard input (data fed into the program)
    STDOUT (1) - Standard output (data printed by the program, defaults to the terminal)
    STDERR (2) - Standard error (for error messages, also defaults to the terminal)
>
    Save output to a file.
>>
    Append output to a file.
<
    Read input from a file.
2>
    Redirect error messages.
|
    Send the output from one program as input to another program.

Redirecting STDERR
ls -l video.mpg blah.foo 2> errors.txt
ls -l video.mpg blah.foo > myoutput 2>&1 #Maybe we wish to save both normal output and error messages into a single file. This can be done by redirecting the STDERR stream to the STDOUT stream and redirecting STDOUT to a file. We redirect to a file first then redirect the error stream. We identify the redirection to a stream by placing an & in front of the stream number (otherwise it would redirect to a file called 1).

Bash accomodates piping and redirection by way of special files. Each process gets it's own set of files (one for STDIN, STDOUT and STDERR respectively) and they are linked when piping or redirection is invoked. Each process gets the following files:
STDIN - /proc/<processID>/fd/0
STDOUT - /proc/<processID>/fd/1
STDERR - /proc/<processID>/fd/2
To make life more convenient the system creates some shortcuts for us:
STDIN - /dev/stdin or /proc/self/fd/0 - these files provide data depending on from which process they are acessed
STDOUT - /dev/stdout or /proc/self/fd/1
STDERR - /dev/stderr or /proc/self/fd/2
(A few device files have a meaning that depends on the process that accesses it. For example, /dev/stdin, https://unix.stackexchange.com/questions/18239/understanding-dev-and-its-subdirs-and-files)

      Quotes
Note:      
' Single quotes will treat every character literally.
" Double quotes will allow you to do substitution (that is include variables within the setting of the value).


       Command Substitution
Note:       
take the output of a command or program (what would normally be printed to the screen) and save it as the value of a variable
two variants (Command):
myvar=$(ls /etc | wc -l)
myvar=`ls /etc | wc -l`


	  Variable scope and exporting variables
Command:
export var1
Note:
every time a new process is created (to run another script or such) then make a copy of the variable and hand it over to the new process. So although the variables will have the same name they exist in separate processes and so are unrelated to each other. Exporting variables is a one way process. The original process may pass variables over to the new process but anything that process does with the copy of the variables has no impact on the original variables.

      	   Concatenation
Command:
echo "$var1$var2"
Note: variable with variable
Command:
sed -n ""$RANDOM"p" /usr/share/dict/words
Note: variable with string, "" emhasize that RANDOM is varable and not "RANDOMp"
echo 1-"$RANDOM"


	Asking user for input
read varname # see $help read	
Reading interactively is good when you don't know what data may be required until the script is already running.
Passwords are also ideally asked for this way so they aren't kept as plain text in the users history.


     Arithmetic
let a=5+4
let "a = 5 + 4"
let a++
expr 5 + 4 # prints the result
a=$( expr 10 - 3 )
Double parentheses (preferred method):
a=$(( 4 + 5 ))
(( b += 3 ))
(( b++ ))


       Length of the variable
${#VARIABLE}       


       Awk
Awk is a good program to use if you need to work with data that is organised into records with fields (such as the sample data below). It allows you to filter the data and control how it is displayed.
awk '{print "name: " $9, "size: " $5, "owner: " $3}' < file.txt # pick the columns 9, 5, 3


    	    If statement   
if [ <some test> ]
then
<commands>
elif [ <some test> ] 
then
<different commands>
else
<other commands>
fi
Example: (script that can process both agument or stdin)
#!/bin/bash
# else example
if [ $# -eq 1 ]
then
nl $1
else
nl /dev/stdin
fi

The square brackets ( [ ] ) in the if statement above are actually a reference to the command test.
Test ($man test) - can test the conditions by just running the command test ($test 001 -eq 1; echo $?; # 0 is true)
Operator	Description
! EXPRESSION	The EXPRESSION is false.
-n STRING	The length of STRING is greater than zero.
-z STRING	The lengh of STRING is zero (ie it is empty).
STRING1 = STRING2	STRING1 is equal to STRING2
STRING1 != STRING2	STRING1 is not equal to STRING2
INTEGER1 -eq INTEGER2	INTEGER1 is numerically equal to INTEGER2
INTEGER1 -gt INTEGER2	INTEGER1 is numerically greater than INTEGER2
INTEGER1 -lt INTEGER2	INTEGER1 is numerically less than INTEGER2
-d FILE	FILE exists and is a directory.
-e FILE	FILE exists.
-r FILE	FILE exists and the read permission is granted.
-s FILE	FILE exists and it's size is greater than zero (ie. it is not empty).
-w FILE	FILE exists and the write permission is granted.
-x FILE	FILE exists and the execute permission is granted.

Boolean operators:
if [ -r $1 ] && [ -s $1 ]
if [ $USER == 'bob' ] || [ $USER == 'andy' ]

Version with arithmetic expression (double parentheses instead []):
if (( $1 > 100)); then
    echo "Argument is bigger than 100"
else
    echo "Argument is smaller than 100"
   fi
double-parentheses construct is also a mechanism for allowing C-style manipulation of variables in Bash
(allows like (( a == 1 )) evaluations)


	Case statement
Choose a set of comands to execute depending on a string matching a particular pattern.	
case <variable> in
<pattern 1>)
<commands>
;;
<pattern 2>)
<other commands>
;;
esac
Remember that the test for each case is a pattern. The * represents any number of any character. It is essentialy a catch all if for if none of the other cases match. It is not necessary but is often used.
Example:
case $1 in
start)
echo starting
;;
stop)
echo stoping
;;
restart)
echo restarting
;;
*)
echo don\'t know
;;
esac
More example:
space_free=$( df -h | awk '{print $5}' | sort -n | tail -n 1 | sed 's/%//' )
case $space_free in
    [1-5]*)
	echo Plenty of disk space available
	;;
    [6-7]*)
	echo There could be  a problem in the near future
	;;
    8*)
	echo Maybe we should look at clearing out old files
	;;
    9*)
	echo We could have a serious problem on our hands soon
	;;
    *)
	echo Something is not quite right here
	;;
esac


		While loop
while [ <some test> ]
do
<commands>
done
Example:
counter=1
while [ $counter -le 10 ]
do
echo $counter
((counter++))
done

		Until loop
until [ <some test> ]
do
<commands>
done

		For loop
for var in <list>
do
<commands>
done
The for loop will take each item in the list (in order, one after the other), assign that item as the value of the variable var, execute the commands between do and done then go back to the top, grab the next item in the list and repeat over. The list is defined as a series of strings, separated by spaces.
Example:
# Make a php copy of any html files
for value in $1/*.html
do
cp $value $1/$( basename -s .html $value ).php
done

		Break and Continue loop control
break #statement tells bash to leave the loop straight away
continue #statement tells bash to stop runnign through this iteration of the loop and begin the next iteration


	 	Select loop
select var in <list>
do
<commands>
done
When invoked it will take all the items in list (similar to other loops this is a space separated set of items) and present them on the screen with a number before each item. A prompt will be printed after this allowing the user to select a number. When they select a number and hit enter the corresponding item will be assigned to the variable var and the commands between do and done are run. Once finished a prompt will be displayed again so the user may select another option.
No error checking is done. If the user enters something other than a number or a number not corresponding to an item then var becomes null (empty)
If the user hits enter without entering any data then the list of options will be displayed again.
The loop will end when an EOF signal is entered or the break statement is issued.
You may change the system variable PS3 to change the prompt that is displayed.
Example:
names='Kyle Cartman Stan Quit'
PS3='Select character: ' #You may change the system variable PS3 to change the prompt that is displayed
select name in $names
do
if [ $name == 'Quit' ]
then
break
fi
echo Hello $name
done
echo Bye

	Functions
function_name () {
<commands>
}
function function_name {
<commands>
}
In other programming languages it is common to have arguments passed to the function listed inside the brackets (). In Bash they are there only for decoration and you never put anything inside them. $1 .. $9 hold values of arguments passed into the function (same as with arguments for a script)
The function definition ( the actual function itself) must appear in the script before any calls to the function.
Return value can be 0-255, 0 signifies success status, we can use return to set return status.
print_something () {
echo Hello $1
return 5
}
print_something crap
echo $?

Example of getting data from the function (through cat, or echo):
lines_in_file () {
cat $1 | wc -l
}
num_lines=$( lines_in_file $1 )
echo The file $1 has $num_lines lines in it.

Exporting functions to child processes:
export -f function_name


       	  Variable scope
By default a variable is global. This means that it is visible everywhere in the script. We may also create a variable as a local variable. When we create a local variable within a function, it is only visible within that function. To do that we use the keyword local in front of the variable the first time we set it's value.
local var_name=<var_value>


	Overriding Commands
It is possible to name a function as the same name as a command you would normally use on the command line. This allows us to create a wrapper. eg. Maybe every time we call the command ls in our script, what we actually want is ls -lh.
ls () {
command ls -lh
}
When we have a function with the same name as a command we need to put the keyword command in front of the the name when we want the command as opposed to the function as the function normally takes precedence. (we dont want recursion)

     	TPut (terminal output formating and more)
tput is a command which allows you to control the cursor on the terminal and the format of content that is printed. It is quite a powerful and complex tool so I'll introduce some of the basics here but leave it up to you to do further research

