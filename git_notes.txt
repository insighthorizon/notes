git log # use this fucking command
git show-branches # use this fucking command
git status # use this fucking command

git config --global user.name "user name"
git config --global ser.email "user email"

    Initializing a new repository
git init # one time command used inside the repository to be versioned, will create a new .git subdirectory in your current working directory, will also create a new master branch
git init <project directory> # creates the new project directory for us
# does not pair the repository with any remote to push changes to
# we can pair the repo with remote repo afterwards (creating clean repo on bitbucket and using its URL)
# to host your own remote repo, you'll need to set up a "Bare Repository." Both git init and git clone accept a --bare argument. The most common use case for bare repo is to create a remote central Git repository

  Adding a remote repository
# will map remote repository at <remote_repo_url> to a ref in your local repo under <remote_name>      
git remote add <remote_name> <remote_repo_url> # example: git remote add origin https://github.com/insighthorizon/crap.git

    Cloning and existing repository
git clone <repo url> # target an existing repository and create a clone, automatically configures repo for remote collaboration (remote pointed to the <repo url> - the repo we clone from), we can then git push changes to that remote repository

    Git add and git commit
git add
git commit

	What git saves
# Unlike SVN, Git makes no distinction between the working copies and the central repository—they're all full-fledged Git repositories
# by simply designating one Git repo as the “central” repository, it’s possible to replicate a centralized workflow using Git. This is accomplished through conventions rather than being hardwired into the VCS itself
git commit #create snapshot of the current state of (local repository) and make it child of parrent commit (snapshot) on the branch
#git saves only the difference between snapshots (delta)

    HEAD pointer (*)
# HEAD is symbolic name for the currently checket out commit    
# HEAD can be attached to a branch or to a commit
# If HEAD is not attached to any branch (master or anything else), then it is -detached- ant it is pointing directly to a commit, in this state we cant give new commits (commits work only on ranches)
git checkout "commit hash" # HEAD will point to that commit
git checkout master # HEAD will attach to master branch (its last commit)

    Relative refs (^, ~<num>, ...)
    ^ - caret
    ~ - tilde    
# moving upwards to the first parent of the specified commit with ^
git checkout master^
git checkout HEAD^
git checkout master^^ # grandparrent
# Remember that merge commits have multiple parents, so the path to choose is ambiguous.
# Git will normally follow the "first" parent upwards from a merge commit, but specifying a number with ^ changes this default behavior.
# master^ without the modifier, we will follow the first parent after the merge commit (the older one)
# master^2 specifies the second parrent
# moving upwards a number of times with ~<num> (it is number of generations to go back)
git checkout myBranch~3
# moving branches around
git branch -f master HEAD~3 # by force moves the master branch to three parents behind HEAD
# these modifiers can be cnahned together
git checkout HEAD~^2~2

     Branches
git branch newImage #creates pointer to a commit
git checkout newImage # switches us to the chosen branch (default branch is master), so subsequent commits are on the given branch (contain the work of snapshot the branch points to also to keep the branch reference on all the child commits of this snapshot)
# which branch we are on is signified by asterisk (*) (HEAD pointer)
# head is last commit of a branch
git checkout -b <yourbranchname> # shortcut to make branch and switch to it by one command
git checkout -b <branchname> <where to branch> # even better shortcut
git branch <branchname> <where to branch> # without checkout
git branch -d <branchname> # to delete a merged branch (commits of this branch are also contained in other branch)
git branch -D <branchname> # to delete unmerged branch (deletes the commits)

    Merging
# Allows combining work from different branches together (for example combine a branch back in the master)
# Merging creates a commit that thas two unique parents with intention to include all the work from both parrents and all their parrents
git merge bugFix #merges the branch bugFix into currently checked out branch (*)
git checkout bugFix; git merge master # now bugFix  branch would be on the same commit with tha master branch

    Rebasing
git rebase <to where rebase> <what to rebase>
git rebase <where to rebase the checked out branch>
# copying a set of commits and applying them somewhere else
# can be used to make a linear sequence of commits (instead of the in parallel existing branches)
# if we rebase branches it will look like the features developed in branches were developed in sequence instead of in parallel
git rebase master # rebases checked branch onto the master branch
# if we were at other branch, it will put all the subsequent commits of branch into the master
example: (we have two branches - master and myBranch, each has own commits)
git checkout myBranch
git rebase master
#git checkout master
#git rebase myBranch
git rebase  myBranch master # does same as previous two commands in one command
#    Interactive rebase
git rebase -i <where to rebase the checked out branch>
git rebase -i <where to rebase> <what to rebase>
# pick which commits to include and in wnich order
# squash allows to combine commits (multiple commits into one)
# in git rebase -i is to possible chose no commits to be integrated by writing "noop" -this is way to return branch to an older commit, or even delete the whole set of commits if this is the only branch that contains the commits, it is possible to rebase master branch onto older commit with noop and delete arbitrary number of newest subsequent commits this way

    Cherry-pick
# git cherry-pick <Commit1> <Commit2> <...>
# Given one or more existing commits, apply the change each one introduces bellow the current location (HEAD), recording a new commit for each. (as long as that commit isn't an ancestor of HEAD)
# must not have any uncommited changes in repository

    Reversing changes in Git
# git reset reverts changes by moving a branch reference backwards in time to an older commit, as if the commit had never been made, in this sense it rewrites the local history
# it works for local branches on own machine only, it doesn't work for remote branches
git reset HEAD~1
# git revert reverses changes of given commits and shares those with others (is able to revert changes on remote)
# it creates new commit thate introduces the changes that actualy revert the commit, then these changes can be pushed out to remote
git revert HEAD # we specifity which one commit to revert, not where to return to

  	 Editing a commit
commit --amend # replace the tip of the current branch by creating new commit

       Git tags
# permanent mark on certain commits (as milestones)      
git tag <tagname> <commithash>
# we can checkout a tag, but HEAD will detach
git describe # gives descibtion where you (HEAD) are relative to the closest ancestor tag
git describe <ref> # tells location relative to <ref> (commit or branch)

    Fetch and Pull
git clone <origin URL>
git remote # tells reference names of the remotes
git remote show origin # more info, including URL
# Remote branch (like origin/master) is on local repository and reflects the state of the remote repositories since you last talked to those remotes, only way to talk to remote repository is git fetch
# Remote branches have the special property that when you check them out, you are put into detached HEAD mode. Git does this on purpose because you can't work on these branches directly; you have to work elsewhere and then share your work with the remote (after which your remote branches will be updated).
remote branches also have a (required) naming convention -- they are displayed in the format of:
<remote name>/<branch name>
# common that git actually sets up your remote to be named origin when you git clone a repository
# connection between master and origin/master is explained simply by the "remote tracking" property of branches. The master branch is set to track origin/master -- this means there is an implied merge target and implied push destination for the master branch. When you clone a repository with git, this property is actually set for you automatically. During a clone, git creates a remote branch for every branch on the remote (aka branches like o/master). It then creates a local branch that tracks the currently active branch on the remote, which is master in most cases.
# git fetch downloads the commits that the remote has but are missing from our local repository, and updates where our remote branches point (for instance, origin/master)
# git fetch usually talks to the remote repository through the Internet (via a protocol like http:// or git://).
# git fetch, however, does not change anything about your local state. It will not update your master branch or change anything about how your file system looks right now.It may download all the necessary data to do that, but it does not actually change any of your local files, we need to merge the updated remote branches into local branches after that, we can do it manualy
git pull # a shorthand for a fetch and a merge (all branches with origin branches)
git pull --rebase # a shorthand for a fetch and a rebase

    Push
# uploading local changes to a specified remote and updating that remote to incorporate new commits
example:
git push 
-error # can't push,  need to pull first, because origin diverged
git pull
next:
git pull --rebase; git push
-----
git checkout -b totallyNotMaster origin/master # Creates a new branch named totallyNotMaster and sets it to track origin/master,therefore remote master can track totally different branch name, and i don't like this feature
git branch -u origin/master foo # another way
git push <remote_name> <local_branch_name> # git push origin master - Go to the branch named "master" in my repository, grab all the commits, and then go to the branch "master" on the remote named "origin." Place whatever commits are missing on that branch and then tell me when you're done. So git ignores where are checked out while performing this command.
git push <remote(origin)> <source>:<destination> #for specifying the source (any branch, reference like HEAD^...) and destination branch, git would resolve reference into location and upload whatever commits that weren't present yet on the remote, and then updated destination, if <destination> doesnt exist, then git creates that branch on remote for us
git fetch <remote> <source>:<destination> # just like git push in reverse
git push origin :foo # pushing nothing to remote foo branch deletes the foo branch
git fetch origin :bar # this makes a new local branch bar
git pull <remote> <source>:<destination>
git pull <remote_name> <local_branch_name>

git push origin :<destination> # removes the remote branch
git push origin --delete <remote_branch> # same

git pull origin foo is equal to: 
git fetch origin foo; git merge origin/foo

git pull origin bar~1:bugFix is equal to:
git fetch origin bar~1:bugFix; git merge bugFix

    Tracking and untracking files in Git repo (gitignore)
https://www.atlassian.com/git/tutorials/saving-changes/gitignore
