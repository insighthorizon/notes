git log # use this fucking command
git status # use this fucking command

	What git saves
git commit #create snapshot of the current state of (local repository) and make it child of parrent commit (snapshot) on the branch
#git saves only the difference between snapshots (delta)

     Branches
git branch newImage #creates pointer to a commit
git checkout newImage # switches us to the chosen branch (default branch is master), so subsequent commits are on the given branch (contain the work of snapshot the branch points to also to keep the branch reference on all the child commits of this snapshot)
# which branch we are on is signified by asterisk (*) (HEAD pointer)
# head is last commit of a branch
git checkout -b [yourbranchname] # shortcut to make branch and switch to it by one command

    Merging
# Allows combining work from different branches together (for example combine a branch back in the master)
# Merging creates a commit that thas two unique parents with intention to include all the work from both parrents and all their parrents
git merge bugFix #merges the branch bugFix into master (if we were at the master branch with the asterisk (*)
git checkout bugFix; git merge master # now bugFix  branch would be on the same commit with tha master branch


    Rebasing
# copying a set of commits and applying them somewhere else
# can be used to make a linear sequence of commits (instead of the in parallel existing branches)
# if we rebase branches it will look like the features developed in branches were developed in sequence instead of in parallel
git rebase master # rebases checked branch onto the master branch
# if we were at other branch, it will put all the subsequent commits of branch into the master
example: (we have two branches - master and myBranch, each has own commits)
git checkout myBranch
git rebase master
git checkout master
git rebase myBranch

    HEAD pointer (*)
# HEAD is symbolic name for the currently checket out commit    
# HEAD can be attached to a branch or to a commit
# If HEAD is not attached to any branch (master or anything else), then it is -detached- ant it is pointing directly to a commit, in this state we cant give new commits (commits work only on ranches)
git checkout "commit hash" # HEAD will point to that commit
git checkout master # HEAD will attach to master branch (its last commit)

    Relative refs (^, ~<num>, ...)
    ^ - caret
    ~ - tilde    
# moving upwards to the first parent of the specified commit with ^
git checkout master^
git checkout HEAD^
git checkout master^^ # grandparrent
# moving upwards a number of times with ~<num>
git checkout myBranch~3
# moving branches around
git branch -f master HEAD~3 # by force moves the master branch to three parents behind HEAD

    Reversing changes in Git
# git reset reverts changes by moving a branch reference backwards in time to an older commit, as if the commit had never been made, in this sense it rewrites the local history
# it works for local branches on own machine only, it doesn't work for remote branches
git reset HEAD~1
# git revert reverses changes of given commits and shares those with others (is able to revert changes on remote)
# it creates new commit thate introduces the changes that actualy revert the commit, then these changes can be pushed out to remote
git revert HEAD # we specifity which one commit to revert, not where to return to

    Cherry-pick
# git cherry-pick <Commit1> <Commit2> <...>
# Given one or more existing commits, apply the change each one introduces bellow the current location (HEAD), recording a new commit for each. (as long as that commit isn't an ancestor of HEAD)
# must not have any uncommited changes in repository

    Interactive rebase
git rebase -i <commit>
# pick which commits to include and in wnich order
# squash allows to combine commits (multiple commits into one)

  	 Editing a commit
commit --amend # replace the tip of the current branch by creating new commit

       Git tags
# permanent mark on certain commits (as milestones)      
git tag <tagname> <commithash>
# we can checkout a tag, but HEAD will detach
git describe # gives descibtion where you (HEAD) are relative to the closest ancestor tag
git describe <ref> # tells location relative to <ref> (commit or branch)

